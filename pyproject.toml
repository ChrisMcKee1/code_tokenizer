[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "code-tokenizer"
dynamic = ["version"]  # Use dynamic version from .env
description = "Transform your codebase into LLM-ready tokens with intelligent processing"
readme = "README.md"
requires-python = ">=3.6"
license = {file = "LICENSE"}
authors = [
    {name = "Chris McKee", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Documentation",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
]
keywords = ["llm", "tokenizer", "code-analysis", "documentation", "cli"]
dependencies = [
    "tiktoken",
    "pygments",
    "rich",
    "pathspec",
    "python-dotenv",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "black",
    "isort",
    "flake8",
    "mypy",
]

[project.urls]
Homepage = "https://github.com/ChrisMcKee1/code-tokenizer"
Documentation = "https://github.com/ChrisMcKee1/code_tokenizer#readme"
Repository = "https://github.com/ChrisMcKee1/code_tokenizer.git"
Issues = "https://github.com/ChrisMcKee1/code_tokenizer/issues"

[project.scripts]
code-tokenizer = "code_tokenizer.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ["py36"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=code_tokenizer --capture=no --tb=short --log-cli-level=INFO"
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::RuntimeWarning"
]
env = [
    "PYTHONUNBUFFERED=1",
    "DISABLE_RICH_PROGRESS=1"
] 