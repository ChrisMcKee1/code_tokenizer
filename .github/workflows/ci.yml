name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run smoke tests
        run: |
          pytest -v -m "smoke" --cov=code_tokenizer --cov-report=xml
      - name: Upload smoke test coverage
        uses: actions/upload-artifact@v4
        with:
          name: smoke-coverage
          path: coverage.xml

  unit-test:
    needs: smoke-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run unit tests
        run: |
          pytest -v -m "unit" --cov=code_tokenizer --cov-report=xml
      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: coverage.xml

  integration-test:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run integration tests
        run: |
          pytest -v -m "integration" --cov=code_tokenizer --cov-report=xml
      - name: Upload integration test coverage
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: coverage.xml

  performance-test:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: integration-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run performance tests
        run: |
          pytest -v -m "performance" --cov=code_tokenizer --cov-report=xml
      - name: Upload performance test coverage
        uses: actions/upload-artifact@v4
        with:
          name: performance-coverage
          path: coverage.xml

  coverage-report:
    needs: [smoke-test, unit-test, integration-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage
      - name: Download all coverage data
        uses: actions/download-artifact@v4
      - name: Combine coverage data
        run: |
          coverage combine smoke-coverage/coverage.xml unit-coverage/coverage.xml integration-coverage/coverage.xml
          coverage report
          coverage xml
      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true  # Make Codecov upload optional
        with:
          file: coverage.xml
          fail_ci_if_error: false  # Don't fail if Codecov upload fails
          token: ${{ secrets.CODECOV_TOKEN }}  # Optional for public repositories

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy flake8
    - name: Check formatting
      run: |
        black --check .
        isort --check-only .
    - name: Type check
      run: mypy src/
    - name: Lint
      run: flake8 src/

  release:
    needs: [coverage-report, lint]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for setuptools_scm to work properly
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools setuptools_scm
    
    - name: Build package
      run: python -m build
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository-url https://test.pypi.org/legacy/ dist/*
      continue-on-error: true  # Don't fail if package already exists on Test PyPI
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/* 